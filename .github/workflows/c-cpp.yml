#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <sstream>
#include <vector>
#include <regex>
#include <set>
using namespace std;

enum Day { MON, TUE, WED, THU, FRI };

typedef struct TimePlace {
    Day day;
    string classroom;
    string time;
} tp;

class Lecture {
public:
    string name;
    string num;
    string professor_id;
    vector<tp> tp_list;

    bool operator<(Lecture rhs) { return num < rhs.num; }
    bool operator==(Lecture rhs) { return num == rhs.num; }
};

vector<Lecture> all_classes_list;

int check_num(string num) {
    regex re("\\d{4}$");
    if (num.length() != 4) {
        return -1;
    }
    if (regex_match(num, re)) {
        return 0;
    }
    return -2;
}
int check_name(string name) {
    regex re("^[A-Z][a-z]+( [A-Z][a-z]+){0,2}$");
    if (regex_match(name, re)) {
        return 0;
    }
    else {
        return -1;
    }
}
int check_time(string time) {
    regex re("[0-4]((0[1-9])|(1[0-8])){2}$");

    if (regex_match(time, re)) {
        string sub1, sub2;
        sub1 = time.substr(1, 2);
        sub2 = time.substr(3, 4);
        if (sub1 >= sub2) return -1;
        else
            return 0;
    }
    return -1;
}

void all_class_integrity() {
    bool is_fuckedup = false;
    fstream newfile;
    string classes;
    newfile.open("classes.txt");
    while (getline(newfile, classes)) {
        string num;
        istringstream ss(classes);
        int a = 0;
        Lecture all_classes;
        while (getline(ss, num, '\t')) {
            if (a == 0) {
                for (int i = 0; i < all_classes_list.size(); i++) {
                    if (num == all_classes_list.at(i).num || check_num(num) != 0) {
                        cout << classes << endl;
                        is_fuckedup = true;
                        break;
                    }
                }
                all_classes.num = num;
            }
            else if (a == 1) {
                if (check_name(num) == -1) {
                    cout << classes << endl;
                    is_fuckedup = true;
                    break;
                }
                all_classes.name = num;
            }
            else if (a == 2) {
                string dt;
                istringstream daytime(num);
                int b = 0;
                vector<tp> dtl;
                tp thatday;
                while (getline(daytime, dt, ' ')) {
                    int c;
                    switch (b % 2) {
                    case 0:
                        if (check_time(dt) == -1) {
                            cout << classes << endl;
                            is_fuckedup = true;
                            break;
                        }
                        c = dt.at(0) - '1';
                        switch (c) {
                        case 0:
                            thatday.day = MON;
                            break;
                        case 1:
                            thatday.day = TUE;
                            break;
                        case 2:
                            thatday.day = WED;
                            break;
                        case 3:
                            thatday.day = THU;
                            break;
                        case 4:
                            thatday.day = FRI;
                            break;
                        }
                        dt.erase(0, 1);
                        thatday.time = dt;
                        break;
                    case 1:
                        if (check_num(dt) != 0) {
                            cout << classes <<endl;
                            is_fuckedup = true;
                            break;
                        }
                        thatday.classroom = dt;
                        dtl.push_back(thatday);
                        break;
                    }
                    b++;
                }
                all_classes.tp_list = dtl;
            }
            else if (a == 3) {
                if (check_num(num) != 0) {
                    cout << classes << endl;
                    is_fuckedup = true;
                }
                all_classes.professor_id = num;
            }
            a++;
        }
        all_classes_list.push_back(all_classes);
    }
    if (is_fuckedup == true) {
        abort();
    }
}
void time_table_integrity() {
    fstream newfile;
    string classes;
    newfile.open("classes.txt");
    bool is_fuckedup = false;
    while (getline(newfile, classes)) {
        string num;
        istringstream ss(classes);
        int a = 0;
        vector<string> time_name;
        while (getline(ss, num, '\t')) {
            if (a == 0) {
                for (int i = 0; i < time_name.size(); i++) {
                    if (num == time_name.at(i) || check_name(num) == -1) {
                        cout << classes << endl;
                        is_fuckedup = true;
                        break;
                    }
                }
                time_name.push_back(num);
            }
            else {
                bool exist = false;
                for (int i = 0; i < all_classes_list.size(); i++) {
                    if (all_classes_list.at(i).num == num) {
                        exist = true;
                    }
                }
                if (exist == false) {
                    cout << classes << endl;
                    is_fuckedup = true;
                    break;
                }
            }
        }
    }
    if (is_fuckedup == true) {
        abort();
    }
}
void professor_list_integrity() {
    fstream newfile;
    string classes;
    newfile.open("professor.txt");
    vector<string> prof;
    bool is_fuckedup = false;
    while (getline(newfile, classes)) {
        string num;
        istringstream ss(classes);
        int a = 0;
        while (getline(ss, num, '\t')) {
            if (a == 0) {
                if (check_num(num) != 0) {
                    cout << num << endl;
                    is_fuckedup = true;
                }
                prof.push_back(num);
            }
            if (a == 1) {
                if (check_name(num) == -1) {
                    cout << num << endl;
                    is_fuckedup = true;
                }
            }
            else
                is_fuckedup = true;
        }
    }
    set<string> proflist(prof.begin(), prof.end());
    if (proflist.size() < prof.size() || is_fuckedup == true) {
        abort();
    }
}
void classroom_list_integrity() {
    fstream newfile;
    string classes;
    vector<string> room;
    bool is_fuckedup = false;
    newfile.open("classroom.txt");
    while (getline(newfile, classes)) {
        if (check_num(classes) != 0) {
            cout << classes << endl;
            is_fuckedup = true;
        }
        room.push_back(classes);
    }
    set<string> roomlist(room.begin(), room.end());
    if (roomlist.size() < room.size() || is_fuckedup == true) {
        abort();
    }
}
void check_file() {
    ifstream lect("classes.txt");
    ifstream lect2("time.txt");
    ifstream lect3("professor.txt");
    ifstream lect4("classroom.txt");
    if (!lect) {
        cout << "classes.txt doesn't exist. Creating" << endl;
        ofstream class_file("classes.txt");
    }
    else {
        all_class_integrity();
    }
    if (!lect2) {
        cout << "time.txt doesn't exist. Creating" << endl;
        ofstream class_file("time.txt");
    }
    else {
        time_table_integrity();
    }
    if (!lect3) {
        cout << "professor.txt doesn't exist. Creating" << endl;
        ofstream class_file("professor.txt");
    }
    else {
        professor_list_integrity();
    }
    if (!lect4) {
        cout << "classroom.txt doesn't exist. Creating" << endl;
        ofstream class_file("classroom.txt");
    }
    else {
        classroom_list_integrity();
    }
}


int main()
{
    check_file();
    for (int i = 0; i < all_classes_list.size(); i++) {
        cout << all_classes_list.at(i).num << "\t";
        cout << all_classes_list.at(i).name << "\t";
        for (int j = 0; j < all_classes_list.at(i).tp_list.size(); j++) {
            cout << all_classes_list.at(i).tp_list.at(j).day << " ";
            cout << all_classes_list.at(i).tp_list.at(j).time << " ";
            cout << all_classes_list.at(i).tp_list.at(j).classroom << " ";
        }
        cout << "\t";
        cout << all_classes_list.at(i).professor_id << "\t";
        cout << endl;
    }
    return 0;
}
